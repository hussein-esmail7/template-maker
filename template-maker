#!/bin/bash

# === PROGRAM DESCRIPTION ===
# This program generates a template 
# file for the chosen file type. The template
# is made from a set of files that are placed 
# in the .config folder.


# TODO: In LaTeX Documents, if there are underscores in the file title, replace
#	the underscores with spaces when put as arguments in the file (like \title{},
#	\pdftitle{}, etc.) 
# TODO: If a target filename argument includes an extension,
#	only show options that match that file extension

#########################
# Default Variables
#########################
OS=$(uname)
O_IFS=$IFS                          # backup IFS value
IFS=""                              # reset IFS value
PROMPT_TEXT="File type: "           # Prompt text during input
DATE_FORMAT=$(date '+%Y %m %d')     # Based from date format in `man date`
# Full name of the user for each OS
[[ "$OS" == "Linux" ]] && USERNAME=$(getent passwd "$(whoami)" | cut -d ':' -f 5)
[[ "$OS" == "Darwin" ]] && USERNAME=$(id -F)
TEMPLATE_FOLDER="$HOME/git/templates/" # Default folder path (all template files stored here)
all_filetypes=("c" "cpp" "css" "html" "java" "ms" "py" "sh" "tex") # Used for checking available file types && if template file is in 'copy' directory
file_extension_func=$(echo $1 | sed 's/.*\.//') # File extension from the argument

# Parametrically building options list:
files=("$TEMPLATE_FOLDER"*)                 # Get a list of all the files in the template dir
DESCRIPTION_STR="templateDescription: "     # The description string is after this in each file
counter=0                                   # Array index counter
for full_file_path in ${files[@]}; do       # For each item in the dir
    file_name="${full_file_path##*/}"
    file_extension="${file_name##*.}"
    if [[ "$file_extension_func" == $(echo "$file_name" | sed 's/.*\.//') || -z "$file_extension_func" ]] ; then   
        # If extension matches given extension, only display that file type
        # If no file name given, display all available types
        desc_uncut=$(grep "$DESCRIPTION_STR" "$full_file_path" | head -1)       # Description string
        desc=$(echo "${desc_uncut##*:}" | xargs)                                # File description

        if [[ "$file_extension" == "html" ]] ; then                             # Remove ending of HTML comment
            desc=$(echo "$desc" | sed 's/-->//')
        elif [[ "$file_extension" == "css" ]] ; then                            # Remove ending of CSS comment
            desc=$(echo "$desc" | sed 's/*\///')
        fi

        FILE_EXPLANATIONS[$counter]="$desc: $file_name"
        counter=$((counter+1))                  # Increase array count for next element
    fi
done

quiet=0                             # Quiet mode is off unless turned on.
open_file=0                         # Open file after it is created.

#########################
# Importing Configurations
#########################
CONFIG=$HOME/.config/template-maker/config      # Source the config file
if [ -f "$CONFIG" ]; then                       # If the config file exists
    source "$CONFIG"                            # Import the settings from there
else                                            # If the config file doesn't exist
    mkdir -p "$HOME/.config/template-maker"     # Make this directory if it doesn't exist
    cp "${{BASH_SOURCE[0]}/config" "$CONFIG"    # Copy the config file from the template
    if [ "$quiet" -eq 0 ]; then
        echo "Config file made at $CONFIG"
    fi
fi

# Error handling in case of empty strings in config
[ -z "$TEMPLATE_NAME" ] ; TEMPLATE_NAME="template" # Default file name
if [ "${TEMPLATE_FOLDER: -1}" != "/" ] ; then # If the last character is not a "/", add it there
    TEMPLATE_FOLDER="${TEMPLATE_FOLDER}/"
fi

#########################
# Check for missing files
#########################
for file in "${all_filetypes[@]}"; do
    amount_files=$(ls -1 "${TEMPLATE_FOLDER}"*."${file}" 2>/dev/null | wc -l) # How many files in the directory
    if [[ $amount_files == 0 && "$quiet" -eq 0 ]] ; then
        echo "Missing template *.${file} file!"
        echo "Program will break if you try to make this type of file"
    fi
done

# This function finds a filename that does not exist already so it doesn't override any existing files
function make_file() { 
    # ${1} = file name without extension
    # ${2} = Desired file name extension
    if [[ ! -z "$shebang" || "$shebang" != "" ]]; then
        template_name="${shebang}.$file_extension_func"     # If given a filename in arguments, use that to name the file
    else
        template_name="${1}.$file_extension_func"           # If not given any arguments, use the default template name
        FILE_FRONT="$1"
    fi 
    counter=0
    if [ -f "$template_name" ] ; then               # If the file already exists in the directory
        while [ -f "$template_name" ] ; do          # While the next file exists, find another name  
            ((counter=counter+1))                   # Add 1 to the name counter
            template_name="${1} ($counter).$file_extension_func"    # Make a new name (wikk check on next loop)
            FILE_FRONT="${1} ($counter)"
        done                                        # Exits loop when it found an unused name
        file_name="$template_name"                  
    else                                            # If the original file name is available
        file_name="${1}.$file_extension_func"
    fi

    file_text=$(cat ${TEMPLATE_FOLDER}${2})

    # Replacing with session-specific information
    # Format: variable=${variable//ReplaceFrom/ReplaceTo}
    # // is used instead of / before ReplaceFrom to replace all occurences. / just does the first
    file_text=${file_text//"[DATE]"/$DATE_FORMAT}                 # Replace the [DATE] with the actual date with the proper formatting
    file_text=${file_text//"[AUTHOR]"/${USERNAME}}                 # Replace [CREATOR] with the user's actual name
    file_text=${file_text//"[FILENAME]"/$file_name}              # Replace all mentions of the file's own name with the actual name
    file_text=${file_text//"[FILE FRONT]"/${FILE_FRONT}}        # File name but without the extension. Mainly used for Java

    if [ "$quiet" -eq 0 ]; then # If quiet mode is off
        echo "$file_name created."
    fi
    echo "$file_text" > "$file_name"

    if [ "$open_file" -eq 1 ]; then
        # macOS only for now.
        open "$file_name"
    fi

    exit 0
}

#########################
# Arguments handled here
#########################

filename_tmp="'$*'"                                     # This is a collection of all arguments separated by space
if [ "$filename_tmp" == "-h" ]; then                    # Help message
    echo "=== template-maker ==="
    echo "Help message here"
    echo "-h:   Print this message."
    echo "-f:   Input the file name. If you provide an extension here, it will automatically recognize it."
    echo "-e:   Extension of the output file. If an extension is provided, the program won't have to ask you for a file type."
    echo "-q:   Quiet mode. It will only print necessary lines, like asking for file type if one wasn't given."
    exit 0                                              # Exit the program after this message is printed
else    # If it isn't a help command, it's a filename
    num_dots=$(echo "${filename_tmp}" | awk -F"." '{print NF-1}')
    filename_tmp="${filename_tmp:1}"                    # Remove the ' at the beginning of the string
    filename_tmp="${filename_tmp::-1}"                  # Remove the ' at the end of the string
    if [ "$num_dots" -ge 1 ]; then                      # If there is a "." (whether a file type is after it comes later)
        file_extension="${filename_tmp##*.}"            # File extension only
        TEMPLATE_NAME=${filename_tmp%.$file_extension}  # File name (total text minus the extension)
        TEMPLATE_NAME="${TEMPLATE_NAME%.*}"             # Remove the file extension (or else it will have the extension twice in the name)
        
    else                                                # If there were no "." which may have indicated a file type
        TEMPLATE_NAME="$filename_tmp"
    fi
fi

#########################
# Asks for the option choice
#########################

# If user hasn't chosen a file type in args
# Display the explanations with file types in fzf, and get the response (formatting: Get string after last '.')
file_name_target=$(for explain in ${FILE_EXPLANATIONS[@]}; do echo "${explain}"; done | fzf | sed 's/.*\: //')
#########################
# Figure out what the user typed + Call the make_file 
# function that (you guessed it) makes the file
#########################
# TODO: Only run if file_name_target is not empty 
[ ! -z "$file_name_target" ] ; make_file "$TEMPLATE_NAME" "$file_name_target"

IFS=${O_IFS}    # rollback IFS value

exit 0
